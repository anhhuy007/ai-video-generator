// app/api/youtube/upload/route.ts
import { NextRequest, NextResponse } from 'next/server'
import youtubeService from '@/app/service/youtube.service'
import path from 'path'
import fs from 'fs'
import axios from 'axios'
import { v4 as uuidv4 } from 'uuid'
import os from 'os'

// These should be environment variables in production
const YOUTUBE_CLIENT_ID = process.env.YOUTUBE_CLIENT_ID
const YOUTUBE_CLIENT_SECRET = process.env.YOUTUBE_CLIENT_SECRET
const YOUTUBE_REDIRECT_URI = process.env.YOUTUBE_REDIRECT_URI

if (!YOUTUBE_CLIENT_ID || !YOUTUBE_CLIENT_SECRET || !YOUTUBE_REDIRECT_URI) {
  throw new Error(
    'YouTube OAuth credentials are not set in environment variables'
  )
} else {
  youtubeService.initialize(
    YOUTUBE_CLIENT_ID,
    YOUTUBE_CLIENT_SECRET,
    YOUTUBE_REDIRECT_URI
  )
}

export async function POST(req: NextRequest) {
  console.log('Uploading video to YouTube')

  try {
    const body = await req.json()
    const { videoUrl, title, description, tags, privacyStatus, tokens } = body

    if (!videoUrl || !tokens) {
      console.log('Video URL or tokens are missing')
      return NextResponse.json(
        {
          success: false,
          message: 'Video URL and tokens are required'
        },
        { status: 400 }
      )
    }

    // Set credentials from tokens
    youtubeService.setCredentials(tokens)

    console.log('Downloading video from cloud URL:', videoUrl)

    // Create a temp file path with unique name
    const tempDir = os.tmpdir()
    const uniqueFilename = `${uuidv4()}.mp4`
    const tempFilePath = path.join(tempDir, uniqueFilename)

    // Download the file from cloud URL to temp location
    try {
      const response = await axios({
        method: 'GET',
        url: videoUrl,
        responseType: 'stream'
      })

      const writer = fs.createWriteStream(tempFilePath)

      response.data.pipe(writer)

      await new Promise<void>((resolve, reject) => {
        writer.on('finish', resolve)
        writer.on('error', reject)
      })

      console.log('Video downloaded successfully to temp file:', tempFilePath)
    } catch (downloadError) {
      console.error('Error downloading video from cloud:', downloadError)
      return NextResponse.json(
        {
          success: false,
          message: 'Failed to download video from provided URL'
        },
        { status: 500 }
      )
    }

    // Convert tags string to array if provided as a string
    const tagArray =
      typeof tags === 'string'
        ? tags.split(',').map(tag => tag.trim())
        : tags || ['AI', 'video', 'generated']

    // Upload to YouTube
    console.log('Uploading video to YouTube...')
    const youtubeVideo = await youtubeService.uploadVideo(
      tempFilePath,
      title || 'AI Generated Video',
      description || 'This video was generated by an AI video creation tool',
      tagArray,
      privacyStatus || 'unlisted'
    )

    // Clean up - delete temp file after upload
    try {
      fs.unlinkSync(tempFilePath)
      console.log('Temp file deleted successfully')
    } catch (deleteError) {
      console.warn('Failed to delete temp file:', deleteError)
    }

    return NextResponse.json({
      success: true,
      youtubeId: youtubeVideo.id,
      youtubeUrl: youtubeVideo.url
    })
  } catch (error: any) {
    console.error('Error uploading to YouTube:', error)
    return NextResponse.json(
      {
        success: false,
        message: 'Failed to upload video to YouTube: ' + error.message
      },
      { status: 500 }
    )
  }
}
